DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@6771beb3; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@74235045; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@30c15d8b; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@4afcd809; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.sql.parser - Reduced `user_name` = 'Chen'
DEBUG main org.apache.calcite.sql2rel - Plan after converting SqlNode to RelNode
LogicalProject(user_name=[$1])
  LogicalFilter(condition=[=($1, 'Chen')])
    LogicalTableScan(table=[[sample, users]])

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [ProjectFilterTransposeRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9: Apply rule [ProjectFilterTransposeRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1), rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#14 via ProjectFilterTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#9 generated 1 successors: [LogicalFilter#14]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/2; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25: Apply rule [FilterProjectTransposeRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen')), rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#18 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#25 generated 1 successors: [LogicalProject#18]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 5/3; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12: Apply rule [StreamProjectRule] to [rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#21 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#12 generated 1 successors: [rel#21:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 6/4; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23: Apply rule [StreamFilterRule] to [rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#23 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#23 generated 1 successors: [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 7/5; PHASE = OPTIMIZE; COST = Infinity
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamProjectRule] rels [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18: Apply rule [StreamProjectRule] to [rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#24 via StreamProjectRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#18 generated 1 successors: [rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 8/6; PHASE = OPTIMIZE; COST = 551.0
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [FilterProjectTransposeRule] rels [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35: Apply rule [FilterProjectTransposeRule] to [rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen')), rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#26 via FilterProjectTransposeRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#35 generated 1 successors: [StreamProject#26]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 9/7; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Pop match: rule [StreamFilterRule] rels [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4: Apply rule [StreamFilterRule] to [rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - Transform to: rel#29 via StreamFilterRule
DEBUG main org.apache.calcite.plan.RelOptPlanner - call#4 generated 1 successors: [rel#29:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))]
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 10/8; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 11/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 31
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 30
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#31
  direct
    rel#28:StreamProject.STREAM.[](input=rel#20:Subset#1.STREAM.[],user_name=$1)
      call#35 rule [FilterProjectTransposeRule]
        rel#23:StreamFilter.STREAM.[](input=rel#22:Subset#3.STREAM.[],condition==($0, 'Chen'))
          call#23 rule [StreamFilterRule]
            rel#16:LogicalFilter.NONE.[](input=rel#15:Subset#3.NONE.[],condition==($0, 'Chen'))
              call#9 rule [ProjectFilterTransposeRule]
                rel#9:LogicalProject.NONE.[](input=rel#8:Subset#1.NONE.[],user_name=$1)
                  no parent
                rel#7:LogicalFilter.NONE.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
                  no parent
        rel#24:StreamProject.STREAM.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
          call#18 rule [StreamProjectRule]
            rel#13:LogicalProject.NONE.[](input=rel#6:Subset#0.STREAM.[],user_name=$1)
              call#9 rule [ProjectFilterTransposeRule]
                rel#9 (see above)
                rel#7 (see above)
StreamFilter#30
  direct
    rel#25:StreamFilter.STREAM.[](input=rel#6:Subset#0.STREAM.[],condition==($1, 'Chen'))
      call#35 rule [FilterProjectTransposeRule]
        rel#23 (see above)
        rel#24 (see above)
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 1/1; PHASE = PRE_PROCESS_MDR; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 2/1; PHASE = PRE_PROCESS; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 3/1; PHASE = OPTIMIZE; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - PLANNER = org.apache.calcite.plan.volcano.VolcanoPlanner@36fc695d; TICK = 4/1; PHASE = CLEANUP; COST = 523.5
DEBUG main org.apache.calcite.plan.RelOptPlanner - Cheapest plan:
StreamProject(user_name=[$1]): rowcount = 15.0, cumulative cost = 523.5, id = 38
  StreamFilter(condition=[=($1, 'Chen')]): rowcount = 15.0, cumulative cost = 501.0, id = 37
    StreamTableScan(table=[[sample, users]]): rowcount = 100.0, cumulative cost = 201.0, id = 3

DEBUG main org.apache.calcite.plan.RelOptPlanner - Provenance:
StreamProject#38
  direct
    rel#35:StreamProject.STREAM.[](input=rel#34:Subset#6.STREAM.[],user_name=$1)
      no parent
StreamFilter#37
  direct
    rel#33:StreamFilter.STREAM.[](input=rel#32:Subset#5.STREAM.[],condition==($1, 'Chen'))
      no parent
rel#3:StreamTableScan.STREAM.[](table=[sample, users])
  no parent

